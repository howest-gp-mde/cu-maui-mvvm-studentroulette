using CommunityToolkit.Mvvm.ComponentModel;

namespace Mde.Mvvm.StudentRoulette.ViewModels
{
    public partial class StudentFormViewModel : ObservableObject
    {
        /* 1. Short notation using the MvvmToolkit ObservableProperty attribute,
         * this generates a public string Mantra behind the scenes */
        [ObservableProperty] 
        private string mantra;

        /* 2. Long notation, 
         * this is what the also generated by the attribute
         * changes are notified with the SetProperty mehod */
        private int numberOfTimesChosen;
        public int NumberOfTimesChosen
        {
            get { return numberOfTimesChosen; }
            set 
            { 
                SetProperty(ref numberOfTimesChosen, value);
            }
        }

        /* 3. Example of why you might need the long notation:
         * if the FirstName changes, we immediately want to notify
         * that the FullName has changed, too.*/
        private string firstName;
        public string FirstName
        {
            get { return firstName; }
            set 
            { 
                if (SetProperty(ref firstName, value))
                {
                    OnPropertyChanged(nameof(FullName));
                }
            }
        }

        /* 4. Same logic for the MiddleName, be everything using attributes */
        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(FullName))]
        private string middleName;

        [ObservableProperty] 
        [NotifyPropertyChangedFor(nameof(FullName))]
        private string lastName;

        /* 5. The result of FullName needs extra processing.
         * Other properties notify that this has changed */
        public string FullName
        {
            get
            {
                List<string> namepieces = new List<string>();
                if (!string.IsNullOrWhiteSpace(FirstName)) namepieces.Add(FirstName);
                if (!string.IsNullOrWhiteSpace(MiddleName)) namepieces.Add(MiddleName);
                if (!string.IsNullOrWhiteSpace(LastName)) namepieces.Add(LastName);

                return string.Join(" ", namepieces) + " ";
            }
        }
    }
}
